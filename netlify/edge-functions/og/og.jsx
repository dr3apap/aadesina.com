import React from 'https://esm.sh/react@18.2.0'
import satori, { init as initSatori } from 'https://esm.sh/satori@0.0.40/wasm'
import { initStreaming } from 'https://esm.sh/yoga-wasm-web@0.1.2'
import { initWasm, Resvg } from 'https://esm.sh/@resvg/resvg-wasm@2.0.0-alpha.4'

const GRADIENTS = [
  'linear-gradient(45deg #eb5a00,#0065a3)',
  'linear-gradient(45deg #0065a3, #eb5a00)',
]

const resvgWasm = fetch(
  'https://unpkg.com/@vercel/og@0.0.18/vendor/resvg.simd.wasm'
).then((res) => res.arrayBuffer())
const yogaWasm = fetch('https://unpkg.com/@vercel/og@0.0.18/vendor/yoga.wasm')
const fallBackFont = fetch(
  'https://unpkg.com/@vercel/og@0.18/vendor/noto-sans-v27-latin-regular.ttf'
).then((font) => font.arrayBuffer())

const initializedYoga = initStreaming(yogaWasm).then((yoga) => initSatori(yoga))
const initializedResvg = initWasm(resvgWasm)

const isDev = !!Deno.env.get('NETLIFY_LOCAL')

async function loadFonts(font, wght = 900) {
  if (!font) return
  const fontApi = `https://fonts.googleapis.com/css2?family=${font}:wght@${wght}&display=swap`

  const googleFont = await (
    await fetch(fontApi, {
      headers: {
        'User-agent':
          'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; de-at) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1',
      },
    })
  ).text()

  const preferType = googleFont.match(
    /\S+\s?\S+\((\S+)\)\s?format\('(opentype|truetype|woff)'\)/
  )
  try {
    return fetch(preferType[1]).then((font) => font.arrayBuffer())
  } catch (err) {
    console.log(err.message)
  }

  //if (!preferType) throw new Error("Failed to load accepted font");
}

const acceptedFont = loadFonts('Inter', 900)

export default function handler(request) {
  try {
    const url = new URL(request.url)
    const title = url.searchParams.has('title')
      ? url.searchParams.get('title').slice(0, 100)
      : 'Hey Felas!'
    const hue = url.searchParams.has('hue') ? url.searchParams.get('hue') : 23
    const background = url.searchParams.has('gradient')
      ? GRADIENTS[url.searchParams.get('gradient')]
      : `hsl(${hue} 80% 50%)`

    const extendedOptions = Object.assign(
      {
        width: 1200,
        height: 600,
        debug: false,
        embedFonts: false,
      },
      {}
    )

    const element = (
      <div
        style={{
          display: 'flex',
          height: '100%',
          width: '100%',
          position: 'relative',
          background,
          padding: '2rem',
          alignItems: 'center',
        }}
      >
        <div
          style={{
            display: 'flex',
            position: 'absolute',
            top: '0',
            left: '0',
            width: '1200',
            height: '630',
          }}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewbox="0 0 1200 630"
            width="1200"
            height="630"
            fill="none"
            style={{
              position: 'relative',
              top: '0',
              left: '0',
              width: '1200',
              height: '630',
            }}
          >
            {' '}
            <path
              fill="#100F0F"
              stroke="#100F0F"
              d="M1201 1H1v630h822.258s-34.341-188 72.496-302C1002.59 215 1201 255 1201 255V1Z"
            />
            <path
              fill="#100F0F"
              d="M1192.13 120.193c0 .453-.07.856-.23 1.21s-.4.634-.71.84c-.31.203-.7.305-1.17.305-.39 0-.73-.073-.99-.217a1.732 1.732 0 0 1-.65-.591 2.88 2.88 0 0 1-.37-.85c-.08-.32-.14-.655-.17-1.006l-.12-.997c-.04-.253-.1-.436-.18-.55a.386.386 0 0 0-.34-.17h-.03c-.29 0-.52.092-.68.277-.16.181-.24.44-.24.775 0 .354.08.636.24.845.15.209.35.348.58.415l-.15 1.819c-.43-.092-.8-.274-1.12-.544a2.58 2.58 0 0 1-.72-1.048c-.18-.431-.26-.93-.26-1.496 0-.394.04-.771.14-1.131.09-.363.23-.685.42-.965.2-.283.45-.506.75-.669.3-.164.67-.245 1.09-.245h4.78v1.865h-.98v.055c.22.114.41.267.58.457.17.191.3.421.4.688.09.268.13.577.13.928Zm-1.35-.563a1.7 1.7 0 0 0-.17-.766 1.376 1.376 0 0 0-.48-.522 1.19 1.19 0 0 0-.66-.189h-.76c.04.061.08.146.11.254.03.104.06.223.09.355.03.132.05.265.07.397.02.132.04.252.05.36.04.231.09.433.16.605.08.172.18.306.3.402.13.095.28.143.46.143.27 0 .48-.097.62-.291.14-.197.21-.446.21-.748Zm1.35-6.978c0 .453-.07.856-.23 1.21s-.4.634-.71.84c-.31.203-.7.305-1.17.305-.39 0-.73-.073-.99-.217a1.732 1.732 0 0 1-.65-.591 2.88 2.88 0 0 1-.37-.85c-.08-.32-.14-.655-.17-1.006l-.12-.997c-.04-.253-.1-.436-.18-.55a.386.386 0 0 0-.34-.17h-.03c-.29 0-.52.092-.68.277-.16.181-.24.44-.24.775 0 .354.08.636.24.845.15.209.35.348.58.415l-.15 1.819c-.43-.092-.8-.274-1.12-.544a2.58 2.58 0 0 1-.72-1.048c-.18-.431-.26-.93-.26-1.496 0-.394.04-.771.14-1.131.09-.363.23-.685.42-.965.2-.283.45-.506.75-.669.3-.164.67-.245 1.09-.245h4.78v1.865h-.98v.055c.22.114.41.267.58.457.17.191.3.42.4.688.09.268.13.577.13.928Zm-1.35-.563a1.7 1.7 0 0 0-.17-.766 1.376 1.376 0 0 0-.48-.522 1.19 1.19 0 0 0-.66-.189h-.76c.04.061.08.146.11.254.03.104.06.223.09.355.03.132.05.265.07.397.02.132.04.252.05.36.04.231.09.433.16.605.08.172.18.306.3.402.13.095.28.143.46.143.27 0 .48-.097.62-.291.14-.197.21-.446.21-.748Zm1.34-7.569c0 .539-.14 1.027-.42 1.464-.28.434-.69.778-1.23 1.034-.55.252-1.22.378-2.01.378-.81 0-1.48-.13-2.02-.392s-.95-.609-1.22-1.043c-.27-.437-.4-.916-.4-1.436 0-.397.06-.728.2-.993.13-.267.3-.483.5-.646.2-.166.39-.292.58-.379v-.06h-3.55v-1.962h9.45v1.939h-1.14v.083c.2.093.4.224.59.393.19.166.35.383.48.651.12.264.19.588.19.969Zm-1.57-.623c0-.317-.09-.585-.26-.803-.17-.222-.42-.391-.73-.508-.32-.12-.68-.18-1.11-.18-.42 0-.78.058-1.09.175-.32.117-.56.287-.72.508-.17.222-.26.491-.26.808 0 .323.09.596.26.817.18.222.42.389.73.503.32.114.68.171 1.08.171.42 0 .78-.057 1.1-.171.31-.117.56-.284.74-.503.17-.221.26-.494.26-.817Zm1.59-8.26c0 .73-.15 1.357-.44 1.883-.3.524-.72.927-1.27 1.21-.55.283-1.2.425-1.94.425-.73 0-1.37-.142-1.92-.425a3.164 3.164 0 0 1-1.29-1.196c-.31-.517-.46-1.123-.46-1.819 0-.467.07-.903.22-1.306.15-.406.37-.76.67-1.062.3-.304.68-.541 1.13-.71.45-.17.97-.255 1.58-.255h.54v5.988h-1.22v-4.136c-.28 0-.53.061-.75.184a1.38 1.38 0 0 0-.52.513c-.12.215-.19.466-.19.752 0 .299.07.563.21.794.14.228.32.406.55.536.23.129.48.195.76.198h1.16c.35 0 .66-.064.91-.194.26-.132.45-.318.59-.558.14-.24.21-.525.21-.854 0-.219-.03-.419-.09-.6a1.271 1.271 0 0 0-.28-.467 1.16 1.16 0 0 0-.45-.295l.12-1.82c.44.093.82.282 1.14.569.33.283.58.65.76 1.099.18.446.27.961.27 1.546Zm-.14-4.575h-9.45v-1.967h3.55v-.06c-.19-.086-.38-.21-.58-.373-.2-.167-.37-.382-.5-.647-.14-.268-.2-.6-.2-.997 0-.517.13-.994.4-1.431.27-.437.68-.786 1.22-1.048.54-.262 1.21-.392 2.02-.392.79 0 1.46.127 2.01.383.54.252.95.597 1.23 1.034.28.434.42.92.42 1.459 0 .381-.07.706-.19.974-.13.264-.29.481-.48.65-.19.17-.39.3-.59.388v.088h1.14v1.94Zm-3.55-1.925c.43 0 .79-.058 1.11-.175.31-.117.56-.287.73-.508.17-.222.26-.491.26-.808 0-.32-.09-.591-.26-.813-.18-.221-.43-.389-.74-.503a3.166 3.166 0 0 0-1.1-.175c-.4 0-.76.057-1.08.17a1.64 1.64 0 0 0-.73.504c-.17.221-.26.494-.26.817 0 .32.09.59.26.812.16.219.4.387.72.504.31.117.67.175 1.09.175Zm3.69-9.507c0 .718-.15 1.338-.46 1.86-.31.521-.73.923-1.28 1.206-.55.283-1.19.425-1.92.425s-1.37-.142-1.92-.425a3.059 3.059 0 0 1-1.28-1.205c-.31-.523-.46-1.143-.46-1.86 0-.718.15-1.336.46-1.856.3-.524.73-.927 1.28-1.21.55-.283 1.19-.425 1.92-.425s1.37.142 1.92.425c.55.283.97.686 1.28 1.21.31.52.46 1.138.46 1.855Zm-1.52-.009c0-.326-.1-.598-.28-.817a1.76 1.76 0 0 0-.77-.494c-.32-.114-.69-.17-1.1-.17-.41 0-.78.056-1.1.17-.33.111-.58.276-.77.494-.19.219-.28.491-.28.817 0 .33.09.607.28.831.19.222.44.39.77.503.32.111.69.167 1.1.167.41 0 .78-.056 1.1-.167.32-.113.58-.281.77-.503.18-.224.28-.501.28-.83Zm-8.07-6.726h9.45v1.967h-9.45v-1.967Zm9.58-3.597c0 .452-.07.855-.23 1.21-.16.353-.4.633-.71.84-.31.203-.7.304-1.17.304-.39 0-.73-.072-.99-.217a1.726 1.726 0 0 1-.65-.59c-.16-.25-.29-.533-.37-.85a6.39 6.39 0 0 1-.17-1.007l-.12-.997c-.04-.252-.1-.435-.18-.55a.387.387 0 0 0-.34-.17h-.03c-.29 0-.52.092-.68.277-.16.182-.24.44-.24.776 0 .353.08.635.24.844.15.21.35.348.58.416l-.15 1.819c-.43-.093-.8-.274-1.12-.545-.31-.27-.56-.62-.72-1.048-.18-.43-.26-.93-.26-1.496 0-.394.04-.77.14-1.13.09-.364.23-.685.42-.965.2-.284.45-.507.75-.67.3-.163.67-.245 1.09-.245h4.78v1.865h-.98v.056c.22.114.41.266.58.457.17.19.3.42.4.688.09.267.13.577.13.928Zm-1.35-.564c0-.289-.06-.544-.17-.766a1.38 1.38 0 0 0-.48-.522c-.19-.126-.42-.189-.66-.189h-.76c.04.062.08.146.11.254a5.493 5.493 0 0 1 .16.752c.02.133.04.253.05.36.04.231.09.433.16.605.08.173.18.307.3.402a.75.75 0 0 0 .46.143c.27 0 .48-.097.62-.29.14-.198.21-.447.21-.749Zm1.34-6.105a1.097 1.097 0 0 1-1.11 1.108c-.3 0-.56-.108-.77-.323-.22-.218-.33-.48-.33-.785 0-.295.11-.554.33-.775.21-.222.47-.333.77-.333.21 0 .39.053.56.157.17.102.3.236.4.402.1.166.15.35.15.55Zm.02-5.926c0 .726-.16 1.35-.46 1.874-.31.52-.74.92-1.3 1.2-.55.277-1.18.416-1.9.416s-1.36-.14-1.91-.42a3.145 3.145 0 0 1-1.29-1.205c-.31-.52-.46-1.139-.46-1.856 0-.619.11-1.16.33-1.625.23-.465.54-.833.95-1.103.41-.271.88-.42 1.43-.448v1.856c-.35.052-.64.19-.85.415-.22.222-.33.513-.33.873 0 .304.08.57.25.798.16.225.4.4.71.527.32.126.7.189 1.14.189.46 0 .84-.062 1.16-.185.32-.126.56-.303.72-.53.17-.228.25-.495.25-.8 0-.224-.04-.426-.14-.604-.09-.182-.22-.33-.4-.448-.18-.12-.39-.198-.64-.235v-1.856a2.9 2.9 0 0 1 1.43.443c.41.262.73.623.96 1.085.23.462.35 1.008.35 1.639Zm0-7.63c0 .717-.15 1.337-.46 1.86-.31.52-.73.922-1.28 1.205-.55.283-1.19.425-1.92.425s-1.37-.142-1.92-.425a3.059 3.059 0 0 1-1.28-1.205c-.31-.523-.46-1.143-.46-1.86 0-.717.15-1.336.46-1.856.3-.523.73-.926 1.28-1.21.55-.283 1.19-.424 1.92-.424s1.37.141 1.92.425c.55.283.97.686 1.28 1.21.31.52.46 1.138.46 1.855Zm-1.52-.01c0-.326-.1-.598-.28-.817a1.761 1.761 0 0 0-.77-.493c-.32-.114-.69-.171-1.1-.171-.41 0-.78.057-1.1.17-.33.111-.58.276-.77.494-.19.22-.28.491-.28.818 0 .329.09.606.28.83.19.222.44.39.77.504.32.11.69.166 1.1.166.41 0 .78-.055 1.1-.166.32-.114.58-.282.77-.503.18-.225.28-.502.28-.831Zm1.38-4.759h-7.09V42.43h1.25v-.083a1.94 1.94 0 0 1-.98-.739c-.24-.345-.36-.757-.36-1.237 0-.486.12-.9.36-1.242.24-.342.57-.57.98-.683v-.074a1.852 1.852 0 0 1-.97-.785c-.25-.382-.37-.832-.37-1.353 0-.661.21-1.198.63-1.61.42-.416 1.01-.624 1.78-.624h4.77v1.962h-4.38c-.39 0-.69.105-.89.314-.19.21-.29.47-.29.785 0 .357.11.635.34.835.22.2.52.3.89.3h4.33v1.907h-4.42c-.35 0-.63.1-.83.3-.21.197-.31.457-.31.78 0 .219.05.416.16.591.11.173.26.31.46.411.19.102.42.152.68.152h4.26v1.967Z"
            />
            
          </svg>
        </div>
        <div
          style={{
            display: 'flex',
            position: 'relative',
            padding: '1rem',
          }}
        >
          <div
            style={{
              display: 'flex',
              position: 'relative',
              width: '85%',
              textTransform: 'uppercase',
              fontSize: '56px',
              fontWeight: '900',
              color: 'hsl(0 0% 100%)',
            }}
          >
            {title}
          </div>
          <div
            style={{
              position: 'absolute',
              left: '1rem',
              bottom: '-1rem',
              background: 'hsl(0 0% 100%)',
              zIndex: '-1',
            }}
          ></div>
        </div>
        <img
          style={{
            position: 'absolute',
            right: '0',
            bottom: '0',
            height: '75%',
            width: '50%',
            transform: 'translate(5%,5%)',
            filter: 'saturation(0.5) grayscale(0.5)',
          }}
          src="/public/asset/IMG_1639.jpeg"
          alt=""
        />
      </div>
    )

    const result = new ReadableStream({
      async start(controler) {
        await initializedYoga
        await initializedResvg
        const typeFace = await acceptedFont
        const svg = await satori(element, {
          width: extendedOptions.width,
          height: extendedOptions.height,
          debug: extendedOptions.debug,
          embedFonts: extendedOptions.embedFonts,
          fonts: typeFace || [
            {
              name: 'Sans serif',
              data: typeFace,
              weight: 900,
              style: 'bold',
            },
          ],
        })
        const result = new Resvg(svg, {
          fitTo: {
            mode: 'width',
            value: extendedOptions.width,
          },
        }).render()
        controler.enqueue(result)
        controler.close()
      },
    })
    return new Response(result, {
      headers: {
        'content-type': 'image/png',
        'cache-control': isDev
          ? 'no-cache, no-store'
          : 'public, immutable, no-transforms, max-age=31536000',
        ...extendedOptions.headers,
      },
      status: extendedOptions.status,
      statusText: extendedOptions.statusText,
    })
  } catch (err) {
    console.log(`${err.message}`)
    return new Response('Failed to generate ogImage', {
      status: 500,
    })
  }
}
